(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{"77bE":function(e,t,i){"use strict";i.r(t);var n=i("9Q3x"),r=i("FdzE"),a=i("yMep"),o=i("LtV2"),s=i("hXay"),d=i("2QtR"),l=i("c4kp"),c=i("CjXH"),f=i("L2JU"),h=i("xCqy");function p(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function v(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var u={name:"SharedFileBrowser",components:{DesktopSortingAndPreview:n.a,TreeMenuNavigator:r.a,ContentSidebar:o.a,DesktopToolbar:a.a,ContentGroup:s.a,ContextMenu:d.a,FileBrowser:l.a,HomeIcon:c.B},computed:function(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?p(Object(i),!0).forEach((function(t){v(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):p(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}({},Object(f.b)(["sharedDetail","navigation","config"]),{navigationTree:function(){return this.navigation?this.navigation[0].folders:void 0}}),data:function(){return{homeDirectory:void 0}},methods:{goHome:function(){this.$store.dispatch("browseShared",[{folder:this.homeDirectory,back:!1,init:!0}])},contextMenu:function(e,t){h.a.$emit("contextMenu:show",e,t)},initFileBrowser:function(){this.homeDirectory={id:this.sharedDetail.item_id,name:this.$t("locations.home"),location:"public"},this.$store.dispatch("getFolderTree"),this.goHome()}},created:function(){var e=this;this.sharedDetail?this.initFileBrowser():this.$store.dispatch("getShareDetail",this.$route.params.token).then((function(){e.initFileBrowser()}))}},m=(i("nvG3"),i("KHd+")),g=Object(m.a)(u,(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{attrs:{id:"viewport"},on:{"!contextmenu":function(t){return t.preventDefault(),e.contextMenu(t,void 0)}}},[e.navigationTree&&e.navigationTree.length>=1?i("ContentSidebar",[i("ContentGroup",{attrs:{title:e.$t("sidebar.locations_title")}},[i("div",{staticClass:"menu-list-wrapper vertical"},[i("a",{staticClass:"menu-list-item link",on:{click:e.goHome}},[i("div",{staticClass:"icon"},[i("home-icon",{attrs:{size:"17"}})],1),e._v(" "),i("div",{staticClass:"label"},[e._v("\n                        "+e._s(e.$t("sidebar.home"))+"\n                    ")])])])]),e._v(" "),i("ContentGroup",{staticClass:"navigator",attrs:{title:e.$t("sidebar.navigator_title")}},e._l(e.navigationTree,(function(e){return i("TreeMenuNavigator",{key:e.id,staticClass:"folder-tree",attrs:{depth:0,nodes:e}})})),1)],1):e._e(),e._v(" "),i("div",{attrs:{id:"files-view"}},[i("ContextMenu"),e._v(" "),i("DesktopToolbar"),e._v(" "),i("FileBrowser"),e._v(" "),i("DesktopSortingAndPreview")],1)],1)}),[],!1,null,null,null);t.default=g.exports},FdzE:function(e,t,i){"use strict";var n=i("CjXH"),r=i("L2JU"),a=i("xCqy");function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function s(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}var d={name:"TreeMenuNavigator",props:["nodes","depth","disabled"],components:{TreeMenuNavigator:f,ChevronRightIcon:n.h,FolderIcon:n.x},computed:function(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){s(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}({},Object(r.b)(["fileInfoDetail"]),{disabledFolder:function(){var e=this,t=!1;return this.draggedItem.length>0?this.draggedItem.forEach((function(i){"folder"===i.type&&e.nodes.id===i.parent_id&&(t=!0),e.nodes.id===i.id&&"folder"===i.type&&(t=!0,e.disableChildren=!0),e.disabled&&(e.disableChildren=!0)})):(t=!1,this.disableChildren=!1),t},indent:function(){var e=window.innerWidth<=1024?17:22;return{paddingLeft:(0==this.depth?e:e+20*this.depth)+"px"}}}),data:function(){return{isVisible:!1,isSelected:!1,area:!1,draggedItem:[],disableChildren:!1}},methods:{dragFinish:function(){this.fileInfoDetail.includes(this.draggedItem[0])||this.$store.dispatch("moveItem",{to_item:this.nodes,noSelectedItem:this.draggedItem[0]}),this.fileInfoDetail.includes(this.draggedItem[0])&&this.$store.dispatch("moveItem",{to_item:this.nodes,noSelectedItem:null}),this.draggedItem=[],this.area=!1,a.a.$emit("drop")},dragEnter:function(){this.area=!0},dragLeave:function(){this.area=!1},getFolder:function(){a.a.$emit("show-folder",this.nodes),this.$isThisLocation("public")?this.$store.dispatch("browseShared",[{folder:this.nodes,back:!1,init:!1}]):this.$store.dispatch("getFolder",[{folder:this.nodes,back:!1,init:!1}])},showTree:function(){this.isVisible=!this.isVisible}},created:function(){var e=this;a.a.$on("drop",(function(){e.draggedItem=[]})),a.a.$on("dragstart",(function(t){e.fileInfoDetail.includes(t)||(e.draggedItem=[t]),e.fileInfoDetail.includes(t)&&(e.draggedItem=e.fileInfoDetail)})),a.a.$on("show-folder",(function(t){e.isSelected=!1,e.nodes.id==t.id&&(e.isSelected=!0)}))}},l=(i("WxZZ"),i("KHd+")),c=Object(l.a)(d,(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("transition",{attrs:{name:"folder"}},[i("div",{staticClass:"folder-item-wrapper"},[i("div",{staticClass:"folder-item text-theme",class:{"is-selected":e.isSelected,"is-dragenter":e.area,"is-inactive":e.disabledFolder||e.disabled&&e.draggedItem.length>0},style:e.indent,on:{click:e.getFolder,dragover:function(t){return t.preventDefault(),e.dragEnter(t)},dragleave:e.dragLeave,drop:function(t){return e.dragFinish()}}},[i("chevron-right-icon",{staticClass:"icon-arrow",class:{"is-opened":e.isVisible,"is-visible":0!==e.nodes.folders.length},attrs:{size:"17"},on:{click:function(t){return t.stopPropagation(),e.showTree(t)}}}),e._v(" "),i("folder-icon",{staticClass:"icon text-theme",attrs:{size:"17"}}),e._v(" "),i("span",{staticClass:"label"},[e._v(e._s(e.nodes.name))])],1),e._v(" "),e._l(e.nodes.folders,(function(t){return e.isVisible?i("TreeMenuNavigator",{key:t.id,attrs:{disabled:e.disableChildren,depth:e.depth+1,nodes:t}}):e._e()}))],2)])}),[],!1,null,"92af20fe",null),f=t.a=c.exports},LUFV:function(e,t,i){(e.exports=i("I1BE")(!1)).push([e.i,".is-inactive[data-v-92af20fe] {\n  opacity: 0.5;\n  pointer-events: none;\n}\n.is-dragenter[data-v-92af20fe] {\n  border-radius: 8px;\n}\n.folder-item[data-v-92af20fe] {\n  display: block;\n  padding: 8px 0;\n  transition: 150ms all ease;\n  cursor: pointer;\n  position: relative;\n  white-space: nowrap;\n  width: 100%;\n  border: 2px dashed transparent;\n}\n.folder-item .icon[data-v-92af20fe] {\n  line-height: 0;\n  width: 15px;\n  margin-right: 9px;\n  vertical-align: middle;\n  margin-top: -1px;\n}\n.folder-item .icon path[data-v-92af20fe], .folder-item .icon line[data-v-92af20fe], .folder-item .icon polyline[data-v-92af20fe], .folder-item .icon rect[data-v-92af20fe], .folder-item .icon circle[data-v-92af20fe] {\n  transition: 150ms all ease;\n}\n.folder-item .icon-arrow[data-v-92af20fe] {\n  transition: 300ms all ease;\n  margin-right: 4px;\n  vertical-align: middle;\n  opacity: 0;\n}\n.folder-item .icon-arrow.is-visible[data-v-92af20fe] {\n  opacity: 1;\n}\n.folder-item .icon-arrow.is-opened[data-v-92af20fe] {\n  transform: rotate(90deg);\n}\n.folder-item .label[data-v-92af20fe] {\n  transition: 150ms all ease;\n  font-size: 0.8125em;\n  font-weight: 700;\n  vertical-align: middle;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: inline-block;\n  color: #1B2539;\n  max-width: 130px;\n}\n.folder-item:hover .icon path[data-v-92af20fe], .folder-item:hover .icon line[data-v-92af20fe], .folder-item:hover .icon polyline[data-v-92af20fe], .folder-item:hover .icon rect[data-v-92af20fe], .folder-item:hover .icon circle[data-v-92af20fe], .folder-item.is-selected .icon path[data-v-92af20fe], .folder-item.is-selected .icon line[data-v-92af20fe], .folder-item.is-selected .icon polyline[data-v-92af20fe], .folder-item.is-selected .icon rect[data-v-92af20fe], .folder-item.is-selected .icon circle[data-v-92af20fe] {\n  color: inherit;\n}\n.folder-item:hover .label[data-v-92af20fe], .folder-item.is-selected .label[data-v-92af20fe] {\n  color: inherit;\n}\n@media only screen and (max-width: 1024px) {\n.folder-item[data-v-92af20fe] {\n    padding: 8px 0;\n}\n}\n@media (prefers-color-scheme: dark) {\n.folder-item .label[data-v-92af20fe] {\n    color: #bec6cf;\n}\n}\n",""])},MRed:function(e,t,i){var n=i("LUFV");"string"==typeof n&&(n=[[e.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};i("aET+")(n,r);n.locals&&(e.exports=n.locals)},WxZZ:function(e,t,i){"use strict";var n=i("MRed");i.n(n).a},lEpy:function(e,t,i){var n=i("nKEh");"string"==typeof n&&(n=[[e.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};i("aET+")(n,r);n.locals&&(e.exports=n.locals)},nKEh:function(e,t,i){(e.exports=i("I1BE")(!1)).push([e.i,"#files-view {\n  font-family: 'Nunito', sans-serif;\n  font-size: 16px;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  min-width: 320px;\n  overflow-x: hidden;\n  padding-left: 15px;\n  padding-right: 15px;\n  overflow-y: hidden;\n}\n",""])},nvG3:function(e,t,i){"use strict";var n=i("lEpy");i.n(n).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,